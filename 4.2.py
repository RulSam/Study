#Не очень хорошо, что наша функция char_frequency умеет работать только с одним текстом. Нужно срочно исправлять ситуацию и делать её универсальной. Тогда объявлением функции будет выглядеть по-другому:

# объявили функцию для подсчёта количества символов в неком абстрактном тексте
# def char_frequency(text):
#    text = text.lower()
#    text = text.replace(" ", "")
#    text = text.replace("\n", "")
#
#    count = {}  # для подсчёта символов и их количества
#    for char in text:
#        if char in count:  # если символ уже встречался, то увеличиваем его количество на 1
#            count[char] += 1
#        else:
#            count[char] = 1
#
#    for char, cnt in count.items():
#        print(f"Символ {char} встречается {cnt} раз")
#Отличие в том, что   функция char_frequency принимает переменную text, которая ещё называется аргументом функции. И дальше внутри себя она работает с переменной text, не завися от её содержимого.




#Давайте создадим функцию, которая будет возводить любое число в степень 2.

# функция, которая возводит любое число в квадрат
# def pow_func(base):
#    print(base ** 2)
#
# pow_func(3)  # 9
# pow_func(5)  # 25

#
# Вернёмся к примеру с возведением в степень. Пусть наша функция теперь возводит число в любую степень, но по умолчанию возводит в степень 2. Тогда её объявление будет выглядеть следующим образом:
#
# # функция, которая возводит любое число в степень n
# def pow_func(base, n=2):
#    print(base ** n)
#
# pow_func(3)  # 9
# pow_func(5, 3)  # 125

# Задание 4.2.3
# Задание на самопроверку.
#
# Напишите функцию, которая проверяет, является ли число n делителем числа a и выводит на экран соответствующее сообщение, является ли число делителем или нет.
# def check_num(a, n):
#    if a % n == 0:
#        print(f"Число {n} является делителем числа {a}")
#    else:
#        print(f"Число {n} не является делителем числа {a}")
#
# check_num(4, 2)  # Число 2 является делителем числа 4
# check_num(5, 2)  # Число 2 не является делителем числа 5

# Напишите функцию, которая печатает «обратную лесенку» следующего типа:
# def reverse_stair(n):
#    for i in range(n, 0, -1):
#        print("*" * i)
#
# reverse_stair(5)




# Напишите функцию, которая будет возвращать количество делителей числа а.
#
# Пример ввода: 5
#
# Пример вывода программы: 2
#
# Решение
# def get_multipliers(a):
#    count = 0
#    for n in range(1, a + 1):
#        if a % n == 0:
#            count += 1
#
#    return count
#
# get_multipliers(5)  # 2
# get_multipliers(4)  # 3



# Напишите функцию, которая будет возвращать количество делителей числа а.
#
# Пример ввода: 5
#
# Пример вывода программы: 2
#
# Решение
# def get_multipliers(a):
#    count = 0
#    for n in range(1, a + 1):
#        if a % n == 0:
#            count += 1
#
#    return count
#
# get_multipliers(5)  # 2
# get_multipliers(4)  # 3